import tkinter as tk
from tkinter import messagebox
import mysql.connector
from mysql.connector import Error

def connect_to_database():
    try:
        open_dashboard = mysql.connector.connect(
            host='localhost',
            user='root',  # Default XAMPP username
            password='',  # Default XAMPP password
            database='retailing_system'
        )
        cursor = open_dashboard.cursor()
        print("Database connected successfully!")
        return open_dashboard
    except mysql.connector.Error as err:
        print(f"Error: {err}")
        return None
    
def apply_border_radius(widget):
    widget.configure(highlightbackground="black", highlightthickness=1, relief="flat")


# Global variable to store registered users
registered_users = {}

# Function to handle the payment process
def process_payment(promo, price, bg_color, username):
    payment_window = tk.Toplevel(root)
    payment_window.title("Payment")
    payment_window.geometry("600x400")
    payment_window.configure(bg=bg_color)

    # Display selected promo
    label_welcome = tk.Label(payment_window, text=f"WELCOME ({username})", bg=bg_color, font=("Arial", 12, "bold"))
    label_welcome.pack(pady=(10, 20))

    label_selected = tk.Label(payment_window, text=f"YOU SELECTED:", bg=bg_color, font=("Arial", 10, "bold"))
    label_selected.pack(pady=(5, 5))

    label_promo = tk.Label(payment_window, text=f"{promo} - {price} pesos", bg=bg_color, font=("Arial", 10))
    label_promo.pack(pady=(5, 15))

    # Amount entry
    label_amount = tk.Label(payment_window, text="ENTER AMOUNT:", bg=bg_color, font=("Arial", 10, "bold"))
    label_amount.pack(pady=(10, 5))

    entry_amount = tk.Entry(payment_window, width=20, font=("Arial", 10))
    entry_amount.pack(pady=(5, 15))

    label_charge = tk.Label(payment_window, text=f"YOU WILL BE CHARGED: {price} pesos", bg=bg_color, font=("Arial", 10))
    label_charge.pack(pady=(5, 15))

    # Function to confirm payment
    def confirm_payment():
        try:
            amount = int(entry_amount.get())
            if amount < int(price.replace("P", "")):
                messagebox.showerror("Payment Error", "Insufficient amount entered.")
            else:
                change = amount - int(price.replace("P", ""))
                # Database saving logic
                try:
                    db = mysql.connector.connect(
                        host="localhost",
                        user="root",
                        password="",
                        database="retailing_system"
                    )
                    cursor = db.cursor()
                    query = "INSERT INTO records (username, promo_selected, amount_paid, change_amount) VALUES (%s, %s, %s, %s)"
                    values = (username, promo, amount, change)
                    cursor.execute(query, values)
                    db.commit()
                    db.close()
                except mysql.connector.Error as err:
                    messagebox.showerror("Database Error", f"Error saving record: {err}")

                # Success message
                messagebox.showinfo("Payment Success", f"Load Successfully!! Thanks for coming again. Change: P{change}")
                payment_window.destroy()  # Close payment window
        except ValueError:
            messagebox.showerror("Input Error", "Please enter a valid number.")

    # Confirm button
    button_confirm = tk.Button(
        payment_window,
        text="CONFIRM",
        bg="#e0e0e0",
        font=("Arial", 10, "bold"),
        command=confirm_payment  # Function to handle payment confirmation
    )
    button_confirm.pack(pady=(20, 0))

# Function to display the promos window
def show_promos(carrier, bg_color, username):
    promos = {
        "TM": [("SURF10", "P13"), ("FB10", "P13"), ("EASYSURF30", "P33"), ("GO99", "P110"), ("GO149", "P160")],
        "GLOBE": [("GO50", "P50"), ("GO90", "P90"), ("GOSURF299", "P299")],
        "TNT/SMART": [("GIGA99", "P99"), ("GIGA299", "P299"), ("SURFMAX999", "P999")]
    }

    promo_window = tk.Toplevel(root)
    promo_window.title(f"{carrier} Promos")
    promo_window.geometry("600x400")
    promo_window.configure(bg=bg_color)
    promo_window.attributes("-fullscreen", True)

    label_welcome = tk.Label(promo_window, text=f"{carrier} PROMOS:", bg=bg_color, font=("Arial", 14, "bold"))
    label_welcome.pack(pady=(10, 20))

    for promo, price in promos.get(carrier, []):
        button_promo = tk.Button(promo_window, text=f"{promo} - {price}", bg="#f7f4e9", font=("Arial", 10),
                                 command=lambda p=promo, pr=price: [promo_window.destroy(), process_payment(p, pr, bg_color, username)])
        button_promo.pack(pady=(5, 5))

    button_confirm = tk.Button(promo_window, text="CONFIRM", bg="#e0e0e0", font=("Arial", 10, "bold"), command=promo_window.destroy)
    button_confirm.pack(pady=(20, 0))


# Updated function for the carrier dashboard
def open_dashboard(username):
    dashboard_window = tk.Toplevel(root)
    dashboard_window.title("Dashboard")
    dashboard_window.geometry("600x400")
    dashboard_window.configure(bg="#C4DCC3")
    dashboard_window.attributes("-fullscreen", True)

    label_welcome = tk.Label(dashboard_window, text=f"WELCOME ({username})", bg="#C4DCC3", font=("Arial", 12, "bold"))
    label_welcome.pack(pady=(10, 20))

    label_select_carrier = tk.Label(dashboard_window, text="SELECT YOUR CARRIER:", bg="#C4DCC3", font=("Arial", 10, "bold"))
    label_select_carrier.pack(pady=(0, 10))

    def handle_carrier_selection(carrier, bg_color):
        dashboard_window.destroy()
        show_promos(carrier, bg_color, username)

    button_tnt = tk.Button(dashboard_window, text="TNT/SMART", bg="#f7f4e9", font=("Arial", 10), width=15,
                           command=lambda: handle_carrier_selection("TNT/SMART", "#FFDAB9"))
    button_tnt.pack(pady=(5, 5))

    button_globe = tk.Button(dashboard_window, text="GLOBE", bg="#f7f4e9", font=("Arial", 10), width=15,
                             command=lambda: handle_carrier_selection("GLOBE", "#ADD8E6"))
    button_globe.pack(pady=(5, 5))

    button_tm = tk.Button(dashboard_window, text="TM", bg="#f7f4e9", font=("Arial", 10), width=15,
                          command=lambda: handle_carrier_selection("TM", "#FFB6C1"))
    button_tm.pack(pady=(5, 5))

def show_database_window():
    db_window = tk.Toplevel(root)
    db_window.title("Database Records")
    db_window.geometry("800x600")
    db_window.configure(bg="#ffffff")

    try:
        db = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="retailing_system"
        )
        cursor = db.cursor()
        cursor.execute("SELECT * FROM records")  # Replace 'records' with your table name
        rows = cursor.fetchall()

        # Display records
        for i, row in enumerate(rows):
            tk.Label(db_window, text=row, bg="#ffffff").grid(row=i, column=0)

        db.close()
    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error: {err}")
        
# Function to validate login
def validate_login():
    username = entry_username.get()
    password = entry_password.get()

    try:
        # Connect to the MySQL database
        db = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="retailing_system"
        )
        cursor = db.cursor()

        # Check if the username and password match
        cursor.execute("SELECT * FROM users WHERE username = %s AND password = %s", (username, password))
        user = cursor.fetchone()

        if user:
            messagebox.showinfo("Login Successful", "Welcome to the Retailing System!")
            open_dashboard(username)  # Open the dashboard window
        else:
            messagebox.showerror("Login Failed", "Invalid username or password.")

        db.close()
    except mysql.connector.Error as err:
        messagebox.showerror("Database Error", f"Error: {err}")

        
def open_registration_window():
    registration_window = tk.Toplevel(root)
    registration_window.title("Register")
    registration_window.geometry("600x400")
    registration_window.configure(bg="#d3e0c5")

    # Left frame for registration inputs
    register_frame = tk.Frame(registration_window, bg="#f7f4e9", padx=30, pady=30, highlightbackground="black", highlightthickness=1)
    register_frame.place(relx=0.3, rely=0.5, anchor="center")

    label_title = tk.Label(register_frame, text="EMAIL & PHONE NUMBER", bg="#f7f4e9", font=("Arial", 10, "bold"))
    label_title.pack(pady=(0, 10))

    entry_reg_username = tk.Entry(register_frame, width=30, font=("Arial", 10))
    entry_reg_username.pack(pady=(0, 15))

    label_password = tk.Label(register_frame, text="PASSWORD", bg="#f7f4e9", font=("Arial", 10, "bold"))
    label_password.pack(pady=(0, 10))

    entry_reg_password = tk.Entry(register_frame, show="*", width=30, font=("Arial", 10))
    entry_reg_password.pack(pady=(0, 15))

    label_confirm_password = tk.Label(register_frame, text="CONFIRM PASSWORD", bg="#f7f4e9", font=("Arial", 10, "bold"))
    label_confirm_password.pack(pady=(0, 10))

    entry_confirm_password = tk.Entry(register_frame, show="*", width=30, font=("Arial", 10))
    entry_confirm_password.pack(pady=(0, 15))

    # Function to handle registration
    def register_user():
        username = entry_reg_username.get()
        password = entry_reg_password.get()
        confirm_password = entry_confirm_password.get()

        if password != confirm_password:
            messagebox.showerror("Registration Failed", "Passwords do not match.")
            return

        try:
            # Connect to the MySQL database
            db = mysql.connector.connect(
                host="localhost",
                user="root",
                password="",
                database="retailing_system"
            )
            cursor = db.cursor()

            # Check if the username already exists
            cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
            existing_user = cursor.fetchone()

            if existing_user:
                messagebox.showerror("Registration Failed", "Username already exists.")
            else:
                # Insert the new user into the database
                cursor.execute("INSERT INTO users (username, password) VALUES (%s, %s)", (username, password))
                db.commit()
                messagebox.showinfo("Registration Successful", "Your account has been created.")
                registration_window.destroy()  # Close the registration window

            db.close()
        except mysql.connector.Error as err:
            messagebox.showerror("Database Error", f"Error: {err}")

    # Confirm button to call the register_user function
    button_register = tk.Button(register_frame, text="CONFIRM", command=register_user, bg="#e0e0e0", font=("Arial", 10, "bold"), width=20)
    button_register.pack(pady=(10, 0))

    # Right frame for icon
    icon_frame = tk.Frame(registration_window, bg="#d3e0c5", width=400, height=500)
    icon_frame.place(relx=0.7, rely=0.5, anchor="center")

    # Add the user icon
    icon_label = tk.Label(icon_frame, text="👤", font=("Arial", 120), bg="#d3e0c5", fg="#000000")
    icon_label.place(relx=0.5, rely=0.5, anchor="center")

def view_records():
    records_window = tk.Toplevel(root)
    records_window.title("Transaction Records")
    records_window.geometry("600x400")

    connection = connect_to_database()
    if connection:
        cursor = connection.cursor()

        cursor.execute("SELECT * FROM transactions")
        records = cursor.fetchall()
        cursor.close()
        connection.close()

        # Display records
        for record in records:
            tk.Label(records_window, text=str(record), font=("Arial", 10)).pack()


# Create the main window
root = tk.Tk()
root.title("Retailing System Login")
root.geometry("600x400")
root.configure(bg="#d3e0c5")
root.attributes("-fullscreen", True)

# Left frame for login inputs
login_frame = tk.Frame(root, bg="#f7f4e9", padx=30, pady=30, highlightbackground="black", highlightthickness=1)
login_frame.place(relx=0.3, rely=0.5, anchor="center")

label_title = tk.Label(login_frame, text="EMAIL & PHONE NUMBER", bg="#f7f4e9", font=("Arial", 10, "bold"))
label_title.pack(pady=(0, 10))

entry_username = tk.Entry(login_frame, width=30, font=("Arial", 10))
entry_username.pack(pady=(0, 15))

label_password = tk.Label(login_frame, text="PASSWORD", bg="#f7f4e9", font=("Arial", 10, "bold"))
label_password.pack(pady=(0, 10))

entry_password = tk.Entry(login_frame, show="*", width=30, font=("Arial", 10))
entry_password.pack(pady=(0, 15))

button_login = tk.Button(login_frame, text="LOGIN", command=validate_login, bg="#e0e0e0", font=("Arial", 10, "bold"), width=20)
button_login.pack(pady=(10, 10))

button_register = tk.Button(login_frame, text="REGISTER", command=open_registration_window, bg="#e0e0e0", font=("Arial", 10, "bold"), width=20)
button_register.pack(pady=(0, 0))

# Right frame for icon
icon_frame = tk.Frame(root, bg="#d3e0c5", width=400, height=500)
icon_frame.place(relx=0.7, rely=0.5, anchor="center")

# Add the user icon
icon_label = tk.Label(icon_frame, text="👤", font=("Arial", 120), bg="#d3e0c5", fg="#000000")
icon_label.place(relx=0.5, rely=0.5, anchor="center")

# Start the GUI event loop
root.mainloop()
